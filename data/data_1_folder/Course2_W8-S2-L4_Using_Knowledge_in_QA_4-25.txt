Rich knowledge can also be used in modern
question answering systems. And the most
commonly used form of knowledge is
relations. And so relation extraction,
which we talked about in a previous
lecture, is very important in question
answering. And the relations can occur in
the, in, in pulling out the answers or in
analyzing the question, or in both. So for
example, we might have databases of
relations, triple stores that we might draw
from Wikipedia infoboxes and might be
stored in places like DBpedia and FreeBase and
these, these various databases. And we can
learn facts like: born in; Emma Goldman;
June 27, 1869. So we can learn the birth
date of somebody or that Cao Xue-Qin
wrote Dream of the Red Chamber, my
favorite novel. So this author-of relation,
this born-in relation are the kinds of
things that we might be able to extract
from these triple stores, to answer
questions about Emma Goldman's birth date,
or, or the, the name of the author of Dream
of the Red Chamber. And, doing that
requires that we know what relation was
being asked for in the question. And so
we're gonna need to also extract relations
from questions. So if I ask a question
like, whose granddaughter starred in E.T.,
I need to know that this question has a
relations like, someone acted in E.T., and
someone else has that someone as a
granddaughter. So these are just the kind
of relations, that, if we could extract
from both the question and the answer,
then we can do some matching on our triple
stores and help find the answer.
And that's gonna be used by most of the modern
question answering systems.
Another kind of rich use of knowledge is 
temporal reasoning from again, from these
relation databases but also from obituaries 
or biographical dictionaries. So a question
that IBM's Watson faced: In 1594 he
took a job as a tax collector in Andalusia.
And the candidate answers here are
Thoreau and Cervantes. And we'd like to
know that Thoreau was a very bad answer,
because Thoreau was born in 1817, couldn't
have been alive in 1594 to take a job, but
Cervantes is at least a possible answer
because he was alive in 1594. So these
kind of temporal databases would let us do
reasoning about when people are born and
died, and therefore, when they can, can,
be an answer to a possible question.
Geospatial knowledge, questions about
containment or directionality or borders,
it can help answer lots of questions, so it
can help us know that Beijing
is a good answer for say, Asian city, but 
New York is not a good answer for Asian city.
Or that California is southwest of Montana.
And so for example, one of these databases
geonames.org lets you type in,
I've typed in Palo Alto here. 
And you can pull out all sorts of facts
from these kind of databases. So its 
population, its elevation, the latitude
and longitude, and the fact that it's part of 
the United States, and part of California,
and in Santa Clara County, and so on.
Many question answering systems are 
simply one shot questions.
You ask a question, you get an answer. 
Other systems, like Siri is one of these,
carry, carry on a full conversation 
with the user, and there context
in conversation matters more. So
for example, in a Siri conversation, you
might say, book a table at Il Fornaio at
seven o'clock with my mom. That might be
sentence one, and sentence two might be,
also send her an email reminder.
So that her, knowing that her, means my mom 
is the kind of thing that matters if you're
going to have multiple sentence questions.
So this co-reference, resolving dialogue
co-reference, knowing that her refers to my
mom, is the kind of thing we need to do in
a question answering system if we have a
full conversation, multiple sentences in a row.
Similarly, you might be able to ask
clarification questions. If a user says
Chicago pizza a system like Siri might ask,
do you mean pizza restaurants in Chicago
or Chicago style pizza? So we might have an
ambiguity and the system resolves the
ambiguity by asking a follow up question
to the user. So these are the kind of
complications that occur when our
question-answering system has to be able to
deal with follow on questions and dialogue
in general.
Knowledge like relation extraction is very 
important in question answering.
And depending on the question answering system, 
we're going to see other kinds of knowledge,
like geospatial, and temporal, and dialogue and 
conversational knowledge, playing a role as well.
