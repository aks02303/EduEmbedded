Hello, In this segment, I'm going to start
talking about ranked retrieval. So,
so far, all of our queries have been
Boolean. We give a query, like ocean and
liner, and the search engine is gonna
return precisely the documents that
contain the words ocean and liner and no
others. Documents either match or they
don't. Now, this can be good for expert
users with a precise understanding of
their needs and the collection And is can
be good when information retrieval in the
system is a component of a larger
application. The system can consume
thousands of results and adjust the query
as needed. But such a system turns out
not to actually be good for the vast majority
of users. Most users are incapable of
writing good Boolean queries, or even if
they can write them they think it's far
too much work to write them. In
particular, Boolean systems often produce
thousands of results, and users don't want
to wade through thousands of results. This
is particularly true of web search
applications. In general there's this
problem with Boolean search, the feast or
famine problem. Boolean queries often
result in either too few returned results,
One or two or even zero because documents
don't precisely satisfy the search
request, or else they may result in too
many results, in the order of thousands
or more. So for example here's a system
giving results. If I give it the result
standard user Dlink 650, it returns
200,000 results. So I try and make my
query more specific, and ask standard user
Dlink 650 no card found. But then I get
zero results. It takes a lot of skill to
come up with a query that produces a
manageable number of hits. The basic
problem is, if you're putting a and
between words, you get too few results.
And if you put or between words, you get
too many results. So part of the solution of
that has been the development of ranked
retrieval models. And the idea of these is
that rather than a set of documents
satisfying a query, in ranked retrieval
models the system returns an ordering over
the top documents in the collection with
respect to the query. Going along with
that has been the adoption of free text
queries, Rather than explicit query
language like the Boolean retrieval
model with its and, ors, and nots.
Instead, the user's query is now just some
words in a human language. In principle,
these are two separate choices which could
be manipulated separately. But in
practice, ranked retrieval models have
normally been associated with free text
queries, and the opposite for the
Boolean retrieval model. The, the
feast or famine problem doesn't exist in
ranked retrieval. When a system produces a
large result set, users don't really
notice. Indeed the size of the result set
basically isn't an issue. Because normally
the system will start off by just showing
the use of the top few results and so not
overwhelm the user. And so the total
number of results is something they
probably won't even know or notice. This
all depends on having a ranking algorithm
that works well though, so that the top
results are good results. So the basis of
ranked retrieval is having a good system
of scoring. We need to be able to return the
documents that are most likely useful to
the searcher. And so that raises the
question of how can we rank order the
documents with respect to a query. And the
method we'll look at to do that is the
idea that what we should do is assign a
score, say a number between zero and one,
to each document. This score measures how
well the document and the query match each
other. So we need a way of assigning a
score to a query-document pair. Let's
start with a one term query. Well, if the
query term doesn't occur in the document
the score for the document should be zero.
And then beyond that probably what we want
to say is that the more frequently the
query term appears in the document the
higher the score should be. And after that
how exactly we score documents isn't quite
so clear. And so, in upcoming segments
we'll look at a number of alternatives for
this. Okay. But I hope that's given you an
idea of what ranked retrieval models are and
how they differ from the Boolean retrieval model.
