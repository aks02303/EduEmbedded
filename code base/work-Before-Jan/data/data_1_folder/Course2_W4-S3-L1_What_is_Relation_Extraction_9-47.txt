Welcome back. We've introduced the idea of
information extraction, and one of its
core tasks, named entity extraction. Now
we'd like to turn to a second task of
information extraction. The task of
extracting relations or relation
extraction. Consider the following
sentence from a company report.
International Business Machines was
incorporated in the state of New York on
June sixteenth and so on. We'd like to
extract a relatively complex relation
about company founding. We'd like to know
that there, that there was a founding
event and that the company was IBM, that
the location was in New York, that there
was a date, that the company was
originally named CTR and so on. So all
this kind of facts about this large
structured relation. That's the general
task of information extraction as we've
defined it. But we're gonna define a
simpler task of relation extraction which
we're gonna call the task of extracting
relation triples. So, instead of these
complex events we'll extract thing like
founding year, IBM, 1911. So, a simple
relation between a predicate and two
arguments. Ibm was founded in the year
1911, founding year IBM, 1911. And the
same with location, foundation location
IBM, New York. So, a series of individual
triples, and that'll be our task,
extracting these triples from text. So,
for example imagine the following. We
complete a page about Stanford University.
Taking a sentence like the Leland Stanford
Junior University, commonly referred to as
Stanford University, and so on. From these
fragments of sentences, we'd like to
extract relations like the following, that
Stanford is located in California. And we
get that from located in Stanford,
California, or founded in 1891.
[inaudible] founded the university in 1891
and the founder was Leland Stanford and
here we have Leland Stanford. So from this
kind of text, our job is to extract
individual relations between the entities
and the texts. Relation extraction is
important for all sorts of applications.
Any time we need some kind structured
knowledge and the knowledge originally is
in the form of text, it's more easy for an
application to get knowledge from a
structured database. So we'd like to
extract these textual facts into
structured form and that could be new
structured databases or we could be adding
words to current databases, like the word
net, the source that we'll talk about
later or freebase or DDP that we'll talk
about later today. These kind of relations
are quite useful, for example, in tasks
like question answering. So imagine the
following question that's modified from a
question that was asked on the Jeopardy
show. The granddaughter of which actor
starred in the movie, ET? And in order to
answer this question, we'd like to know
that the, relations in the question
include acted in ET. So we want to know
who acted in ET. And we have to know that
someone is an actor, and that someone is
somebody else's granddaughter. So these
kind of relations will help, both in
what's being asked in the question, and
then finding the answer in the raw text.
[sound] That's all great, but what
relations should we be extracting? Well,
one set of relations comes from the
automated contact extraction, or ace task,
where seventeen relations grouped into six
classes were defined. So, for example, we
had the class of persons social relations.
So we had families, so, that's gonna be
related to a, a parent or a brother,
relation between people. Or we had
physical location, something as located in
some place or located near some place, or.
Or affiliation with some organization. I
wanna be the founder of an organization or
the owner or some member of an
organization. Or I might be the creator of
some artifact. The manufacturer or
inventor of an artifact. Or I might be a
corporate subsidiary. Or I might be a
geographical sub part of some other
entity. So these are all the kinds of
relations that are in A's. And so, for
example we might have the physical located
in relation and that might hold between a
person like he and some kind of
geopolitical entity like the State of
Tennessee. Or a part whole subsidiary that
might hold between two organizations, the
first organization the parent company of
the second organization. Or, we talked
about family relations, so, again, a
holding between two people, that a wife
and a husband are related by the family
relation. Or, you might have the founder
relation, that holds between a person and
an organization. So here, we have a
relation between Steve Jobs and Apple. So,
these are the kind of relations that we
extracted in a, in a, using the
[inaudible] set of relations. Of course
there's different sets of relations for
every possible task. So for bio medical
information extraction we might wanna use
the umls, the unified medical language
system which defines entities and
relations as well. So for example we have
entities like injury or physiological
function and they can be related by
relations like disrupts or location of.
So, for example, we might have some
pharmacological substance, some drug. And
that might cause some pathological
function might cause some disease or cause
some, some problem, or we might have some
other pathological, sorry, excuse me,
pharmacological substance, or we might
have some other pharmacological substance
that instead treats some pathological
function. So, we have lots of different
entities, in this case 134 of them in this
dataset and 54 relations that can hold
between them. Now for each application we
might have a different set of relations
that might be useful. So for example, the
sentence Doppler echo choreography can be
used to diagnose, left anterior descending
artery stenosis. We might extract from
that sentence, a relation, of, diagnoses,
diagnosis between this technique and this
stenosis. Now there are lots of existing
data basis of relations that have been
extracted from public sources like
Wikipedia for example. So to take the that
same Stanford University Wikipedia page
you may notice over on the right here a
little structure part of the Wikipedia
page that's called the Wikipedia info box.
If you look in more detail at what we have
there. We have in fact a set of relations,
so we have type private, President John
Hennessy, location Stanford and so on. So
each of these kinds of relation names and
the values of the relations. And if you
look at the source for this we can see the
actual info box. And here for example we
can see that the city of the university is
Stanford, the state is California and the
motto Die Luft der Freiheit weht and so
on. And so we can extract these relations
directly out of the info boxes state,
their relation state, their relation model
holding between Stanford and California
are Stanford in the motto. These databases
that draw from Wikipedia tend to represent
the information in an order called
resource description framework triples or
RDF triples. An RDF triple is just a
subject, some sort of predicate and an
object. So the predicate is what we're
calling a relation, so location would be a
predicate in an RDF. So we have Golden
Gate Park location San Francisco, so a
location relation between Golden Gate Park
and San Francisco. And databases like
DBpedia, which draw on the Wikipedia
info-boxes to create these large databases
of triple, in fact has a billion of these
triples 385 million of which come from,
should say million, come from English
Wikipedia. And you know, other databases
like, like free base. We have a lot of
these kind of relations. So a common
relation is the nationality of a person
mentioned in Wikipedia, or their
profession. Or classification of a
biological entity. Or which locations are
inside which other locations. That Paris
is in France, and so on. [sound] We can
also extract ontological relations. We'll
talk about this more when we talk about,
thesauruses like Wordnet. But every kinds
of relation databases includes, the word
called ISA or hypernym or subsumption
relations. So we know that a giraffe is a
kind of ruminant which is a kind of
ungulate, which is a kind of mammal and so
on. So these ISA or hypernym relations are
very important. And we can think of those
as the same kind of relation, extract them
with similar kinds of methods. There's a
specific type of this kind of relation
where the, we have an instance, and a
particular. Entity like San Francisco
which is an instance of a city. So we can
have a relationships between classes, the
class giraffe is a sub-type of the class
ruminant. Or we can have an instance San
Francisco, which is an instance of a class
like city. These relations can be
extracted from text and we can use them to
augment or create new databases that
affirm. How do we build these relation
extractors? There's a number of methods,
like all information extraction, as we saw
with the identity tagging, we can hand
write patterns. We'll talk about hand
written patterns for extracting relations.
We can do supervised machine learning and
then there's a number of popular methods
for doing semi-supervised and unsupervised
learning for extracting relations and
we'll talk about those as well. We've seen
that relation extraction is an important
component of information extraction at
least for question answering and for
building large knowledge bases from text.
